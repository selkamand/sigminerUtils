% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SignatureAnalysis.R
\name{sig_analyse_cohort_from_files}
\alias{sig_analyse_cohort_from_files}
\title{Signature analysis on a large cohorts}
\usage{
sig_analyse_cohort_from_files(
  manifest,
  exclude_sex_chromosomes = TRUE,
  allow_multisample = TRUE,
  include = "pass",
  db_sbs = NULL,
  db_indel = NULL,
  db_dbs = NULL,
  db_cn = NULL,
  db_sv = NULL,
  ref_tallies = NULL,
  ref_umaps_prefix = NULL,
  ref = c("hg38", "hg19"),
  output_dir = "./signatures",
  exposure_type = c("absolute", "relative"),
  n_bootstraps = 100,
  temp_dir = tempdir(),
  verbose = TRUE,
  cores = future::availableCores(omit = 2)
)
}
\arguments{
\item{manifest}{a file with the following column names.
\enumerate{
\item \strong{sample} (required) sample identifier
\item \strong{snv} (optional) path to vcf file with SNVs, MNVs, and INDELs.
\item \strong{copynumber} (optional) path to segment file describing copynumber changes. Must be parse-able by \code{\link[sigstart:parse_cnv_to_sigminer]{sigstart::parse_cnv_to_sigminer()}}.
\item \strong{sv} (optional) path to segment file describing structural variant changes. Must be parse-able by \code{\link[sigstart:parse_purple_sv_vcf_to_sigminer]{sigstart::parse_purple_sv_vcf_to_sigminer()}}.
}}

\item{exclude_sex_chromosomes}{drop sex chromosomes from dataframe output}

\item{allow_multisample}{Do NOT throw an error for VCFs with >2 samples.
Added since some tumor-normal pipelines add a third sample describing RNA genotypes of mutations found in DNA and these 3-sample VCFs would fail purely because they have 3 samples present.
Whether TRUE/FALSE, this function still assumes every mutation in the VCF relates to the \code{sample_id} supplied, so please exclude any homozygous ref alleles for your sample of interest upstream.}

\item{include}{Which variants to include in the final data.frame. Valid values include:
\itemize{
\item \strong{pass}: FILTER column is \code{PASS} or \code{.}.
\item \strong{pass_strict}: FILTER column is \code{PASS}.
\item \strong{all}: Include all variants in VCF regardless of FILTER status.
}}

\item{db_sbs, db_indel, db_dbs, db_cn, db_sv}{a signature collection data.frame where rows are channels and columns are signatures. Row names should be signature channels.
See \code{sigstash::sig_load("COSMIC_v3.4_SBS_GRCh38", format = "sigminer")}  for an example.
Alternatively, you can supply a path to signature collections in tidy_csv format (see \code{\link[sigstash:sig_read_signatures]{sigstash::sig_read_signatures()}} for details)}

\item{ref_tallies}{path to a parquet file describing catalogues of a reference database. Can be produced from a folder full of sigminerUtils signature outputs using \code{\link[=sig_create_reference_set]{sig_create_reference_set()}}.
If building yourself, it must contain columns class,sample,channel,type,fraction,count. If building your own, we recommend partitioning on class then sample.}

\item{ref_umaps_prefix}{prefix of Rds file representing a serialised list of umap objects for different collection types. Produced by \code{\link[=sig_create_reference_set]{sig_create_reference_set()}}.}

\item{ref}{A character vector specifying the reference genome. One of 'hg38' or 'hg19'.}

\item{output_dir}{The output directory for storing results. Default is "./signatures".}

\item{exposure_type}{The type of exposure. Can be "absolute" or "relative". One of "absolute" or "relative"}

\item{n_bootstraps}{The number of bootstrap iterations for fitting signatures. Default is 100.}

\item{temp_dir}{The temporary directory for storing intermediate files. Default is tempdir().}

\item{verbose}{verbose (flag)}

\item{cores}{number of threads to split signature analysis across (distributed by sample).}
}
\value{
None.
}
\description{
Signature analysis on a large cohorts
}
\examples{
\dontrun{
path_manifest <- system.file(
  "pcawg/example_manifest.tsv",
  package = "sigminerUtils"
)

sig_analyse_mutations_single_sample_from_files(
  manifest =
  include = "pass",
  ref = "hg19",
  output_dir = "pcawg_signature_results"
)
}
}
