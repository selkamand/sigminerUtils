% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SignatureAnalysis.R
\name{sig_analyse_mutations_single_sample_from_files}
\alias{sig_analyse_mutations_single_sample_from_files}
\title{Mutational Signature Analysis}
\usage{
sig_analyse_mutations_single_sample_from_files(
  sample_id,
  vcf_snv = NULL,
  segment = NULL,
  vcf_sv = NULL,
  include = "pass",
  exclude_sex_chromosomes = TRUE,
  allow_multisample = TRUE,
  db_sbs = NULL,
  db_indel = NULL,
  db_dbs = NULL,
  db_cn = NULL,
  db_sv = NULL,
  ref_tallies = NULL,
  ref_umaps = NULL,
  ref = c("hg38", "hg19"),
  output_dir = "./signatures",
  exposure_type = c("absolute", "relative"),
  n_bootstraps = 100,
  temp_dir = tempdir(),
  cores = future::availableCores()
)
}
\arguments{
\item{sample_id}{string representing the tumour sample identifier (in your VCFs and other files).}

\item{vcf_snv}{A character string specifying the path to the VCF file.}

\item{segment}{path to segment file}

\item{vcf_sv}{path to a vcf file produced by GRIDSS / PURPLE (purple SV VCFs are typically the better choice since those are produced post-gripss filtering)}

\item{include}{Which variants to include in the final data.frame. Valid values include:
\itemize{
\item \strong{pass}: FILTER column is \code{PASS} or \code{.}.
\item \strong{pass_strict}: FILTER column is \code{PASS}.
\item \strong{all}: Include all variants in VCF regardless of FILTER status.
}}

\item{exclude_sex_chromosomes}{drop sex chromosomes from dataframe output}

\item{allow_multisample}{Do NOT throw an error for VCFs with >2 samples.
Added since some tumor-normal pipelines add a third sample describing RNA genotypes of mutations found in DNA and these 3-sample VCFs would fail purely because they have 3 samples present.
Whether TRUE/FALSE, this function still assumes every mutation in the VCF relates to the \code{sample_id} supplied, so please exclude any homozygous ref alleles for your sample of interest upstream.}

\item{db_sbs, db_indel, db_dbs, db_cn, db_sv}{a signature collection data.frame where rows are channels and columns are signatures. Row names should be signature channels.
See \code{sigstash::sig_load("COSMIC_v3.4_SBS_GRCh38", format = "sigminer")}  for an example.
Alternatively, you can supply a path to signature collections in tidy_csv format (see \code{\link[sigstash:sig_read_signatures]{sigstash::sig_read_signatures()}} for details)}

\item{ref_tallies}{path to a parquet file describing catalogues of a reference database. Can be produced from a folder full of sigminerUtils signature outputs using \code{\link[=sig_create_reference_set]{sig_create_reference_set()}}.
If building yourself, it must contain columns class,sample,channel,type,fraction,count. If building your own, we recommend partitioning on class then sample.}

\item{ref_umaps}{path to an Rds file representing a serialised list of umap objects for different collection types. Produced by \code{\link[=sig_create_reference_set]{sig_create_reference_set()}}.}

\item{ref}{A character vector specifying the reference genome. One of 'hg38' or 'hg19'.}

\item{output_dir}{The output directory for storing results. Default is "./signatures".}

\item{exposure_type}{The type of exposure. Can be "absolute" or "relative". One of "absolute" or "relative"}

\item{n_bootstraps}{The number of bootstrap iterations for fitting signatures. Default is 100.}

\item{temp_dir}{The temporary directory for storing intermediate files. Default is tempdir().}

\item{cores}{Number of cores to use.}
}
\value{
TRUE if analysis finished successfully and FALSE if it FAILED
}
\description{
Run all signature mutation analyses possible from file inputs.
}
\examples{
\dontrun{
path_snvs <- system.file(
  "colo829_testfiles/COLO829v003T.purple.somatic.vcf.gz",
  package = "sigminerUtils"
)
path_cnvs <- system.file(
  "colo829_testfiles/COLO829v003T.purple.cnv.somatic.tsv",
  package = "sigminerUtils"
)
path_svs <- system.file(
  "colo829_testfiles/COLO829v003T.purple.sv.vcf.gz",
  package = "sigminerUtils"
)

sig_analyse_mutations_single_sample_from_files(
  sample_id = "COLO829v003T",
  vcf_snv = path_snvs,
  segment = path_cnvs,
  vcf_sv = path_svs,
  include = "pass",
  ref = "hg38",
  output_dir = "colo829_signature_results"
)
}
}
